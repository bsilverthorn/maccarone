{
    "tagged_input_to_tagged_output": {
        "inputs_hash": "f6eb8c528beaad4c1cdd702662650244e10726dcb97093968930adb4ff6f13e1",
        "value": "<completed id=\"0\">\nmn_source = open(mn_path, \"r\").read()\n</>\n<completed id=\"1\">\nimport re\npy_path = re.sub(f\"{suffix}$\", \".py\", mn_path)\n</>\n<completed id=\"2\">\nif py_path is not None:\n    with open(py_path, \"w\") as f:\n        f.write(py_source)\n</>\n<completed id=\"3\">\nfor mn_file in mn_files:\n    preprocess(mn_file, print_, write, rewrite, suffix)\n</>\n<completed id=\"4\">\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"path\", help=\"Path to the file or directory containing Maccarone snippets\")\nparser.add_argument(\"--print\", dest=\"print_\", action=\"store_true\", help=\"Print the preprocessed Python source\")\nparser.add_argument(\"--write\", action=\"store_true\", help=\"Write the preprocessed Python source to a new file\")\nparser.add_argument(\"--rewrite\", action=\"store_true\", help=\"Overwrite the input file with the preprocessed Python source\")\nparser.add_argument(\"--suffix\", default=\".mn.py\", help=\"Suffix for Maccarone snippet files (default: .mn.py)\")\nargs = parser.parse_args()\nreturn args\n</>"
    }
}