{
    "tagged_input_to_tagged_output": {
        "inputs_hash": "75cad4c66c74b11760e3b155fb6c652ea42d268c53f544f5f26c733cf1ed593a",
        "value": "<completed id=\"0\">\nwith open(mn_path, \"r\") as f:\n    mn_source = f.read()\n</>\n\n<completed id=\"1\">\nif py_path is not None:\n    with open(py_path, \"w\") as f:\n        f.write(py_source)\n</>\n\n<completed id=\"2\">\nfor mn_file in mn_files:\n    preprocess(mn_file, print_, write, rewrite, suffix)\n</>\n\n<completed id=\"3\">\nimport argparse\nparser = argparse.ArgumentParser(description=\"Preprocess files with Maccarone snippets.\")\nparser.add_argument(\"path\", help=\"Path to the file or directory containing files to preprocess.\")\nparser.add_argument(\"--print\", dest=\"print_\", action=\"store_true\", help=\"Print the preprocessed Python source.\")\nparser.add_argument(\"--write\", action=\"store_true\", help=\"Write the preprocessed Python source to a .py file.\")\nparser.add_argument(\"--rewrite\", action=\"store_true\", help=\"Overwrite the input file with the preprocessed Python source.\")\nparser.add_argument(\"--suffix\", default=DEFAULT_MN_SUFFIX, help=\"Suffix for files to preprocess (default: %(default)s).\")\nargs = parser.parse_args()\nreturn args\n</>"
    }
}